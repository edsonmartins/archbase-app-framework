/* Generated By:JavaCC: Do not edit this line. Token.java Version 5.0 */
/* JavaCCOptions:TOKEN_EXTENDS=,KEEP_LINE_COL=null,SUPPORT_CLASS_VISIBILITY_PUBLIC=false */
package br.com.archbase.query.rsql.parser;

/**
 * Descreve o fluxo do token de entrada.
 */
@SuppressWarnings("all")
class Token implements java.io.Serializable {

    /**
     * O identificador de versão para esta classe serializável.
     * Incrementar apenas se a forma <i> serializada </i> do
     * mudanças de classe.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Um número inteiro que descreve o tipo deste token. Esta numeração
     * sistema é determinado por JavaCCParser, e uma tabela desses números é
     * armazenado no arquivo ... Constants.java.
     */
    public int kind;


    /**
     * O número da linha do primeiro caractere deste Token.
     */
    public int beginLine;
    /**
     * O número da coluna do primeiro caractere deste Token.
     */
    public int beginColumn;
    /**
     * O número da linha do último caractere deste Token.
     */
    public int endLine;
    /**
     * O número da coluna do último caractere deste Token.
     */
    public int endColumn;

    /**
     * A imagem da string do token.
     */
    public String image;

    /**
     * Uma referência ao próximo token regular (não especial) da entrada
     * corrente. Se este for o último token do fluxo de entrada, ou se o
     * o gerenciador de tokens não leu tokens além deste, este campo é
     * definido como nulo. Isso é verdade apenas se este token também for um
     * símbolo. Caso contrário, veja abaixo uma descrição do conteúdo de
     * este campo.
     */
    public Token next;

    /**
     * Este campo é usado para acessar tokens especiais que ocorrem antes deste
     * token, mas após o token regular (não especial) imediatamente anterior.
     * Se não houver tais tokens especiais, este campo será definido como nulo.
     * Quando houver mais de um token especial, este campo se refere
     * até o último desses tokens especiais, que por sua vez se refere ao próximo
     * token especial anterior por meio de seu campo specialToken e assim por diante
     * até o primeiro token especial (cujo campo specialToken é nulo).
     * Os próximos campos de tokens especiais referem-se a outros tokens especiais que
     * imediatamente segui-lo (sem um token regular interveniente). Se lá
     * não existe tal token, este campo é nulo.
     */
    public Token specialToken;

    /**
     * No-argument constructor
     */
    public Token() {
    }

    /**
     * Constrói um novo token para a imagem especificada.
     */
    public Token(int kind) {
        this(kind, null);
    }

    /**
     * Constrói um novo token para a imagem e tipo especificados.
     */
    public Token(int kind, String image) {
        this.kind = kind;
        this.image = image;
    }

    /**
     * Retorna um novo objeto Token, por padrão. No entanto, se você quiser, você
     * pode criar e retornar objetos de subclasse com base no valor de ofKind.
     * Basta adicionar os casos ao switch para todos os casos especiais.
     * Por exemplo, se você tiver uma subclasse de Token chamada IDToken que
     * você deseja criar se ofKind for ID, basta adicionar algo como:
     * <p>
     * case MyParserConstants.ID: retorna novo IDToken (ofKind, imagem);
     * <p>
     * para a seguinte instrução switch. Em seguida, você pode transmitir matchedToken
     * variável para o tipo apropriado e use sit em suas ações lexicais.
     */
    public static Token newToken(int ofKind, String image) {
        switch (ofKind) {
            default:
                return new Token(ofKind, image);
        }
    }

    public static Token newToken(int ofKind) {
        return newToken(ofKind, null);
    }

    /**
     * Um valor de atributo opcional do Token.
     * Tokens que não são usados ​​como açúcar sintático geralmente contêm
     * valores significativos que serão usados ​​posteriormente pelo compilador ou
     * intérprete. Este valor de atributo geralmente é diferente da imagem.
     * Qualquer subclasse de Token que realmente deseja retornar um valor não nulo pode
     * substitua este método conforme apropriado.
     */
    public Object getValue() {
        return null;
    }

    /**
     * Retorna a imagem.
     */
    public String toString() {
        return image;
    }

}
/* JavaCC - OriginalChecksum=f494c45a13ec8acbd4492468f3b08108 (do not edit this line) */
