/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 5.0 */
/* JavaCCOptions: */
package br.com.archbase.query.rsql.parser;

/**
 * Erro de Token Manager.
 */
@SuppressWarnings("all")
class TokenMgrError extends Error {

    /**
     * Ocorreu um erro léxico.
     */
    static final int LEXICAL_ERROR = 0;

    /*
     * Ordinais por várias razões pelas quais um erro desse tipo pode ser lançado.
     */
    /**
     * Foi feita uma tentativa de criar uma segunda instância de um gerenciador de token estático.
     */
    static final int STATIC_LEXER_ERROR = 1;
    /**
     * Tentei mudar para um estado léxico inválido.
     */
    static final int INVALID_LEXICAL_STATE = 2;
    /**
     * Detectou (e saiu de) um loop infinito no gerenciador de tokens.
     */
    static final int LOOP_DETECTED = 3;
    /**
     * O identificador de versão para esta classe serializável.
     * Incrementar apenas se a forma <i> serializada </i> do
     * mudanças de classe.
     */
    private static final long serialVersionUID = 1L;
    /**
     * Indica o motivo pelo qual a exceção é lançada. Terá
     * um dos 4 valores acima.
     */
    int errorCode;

    /**
     * No arg constructor.
     */
    public TokenMgrError() {
    }

    /**
     * Construtor com mensagem e razão.
     */
    public TokenMgrError(String message, int reason) {
        super(message);
        errorCode = reason;
    }

    /**
     * Construtor completo.
     */
    public TokenMgrError(boolean eofseen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {
        this(lexicalError(eofseen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
    }

    /*
     * Seguem construtores de vários tipos.
     */

    /**
     * Substitui caracteres não imprimíveis por seu escape (ou escape unicode)
     * equivalentes na string dada
     */
    protected static final String addEscapes(String str) {
        StringBuilder retval = new StringBuilder();
        char ch;
        for (int i = 0; i < str.length(); i++) {
            switch (str.charAt(i)) {
                case 0:
                    break;
                case '\b':
                    retval.append("\\b");
                    break;
                case '\t':
                    retval.append("\\t");
                    break;
                case '\n':
                    retval.append("\\n");
                    break;
                case '\f':
                    retval.append("\\f");
                    break;
                case '\r':
                    retval.append("\\r");
                    break;
                case '\"':
                    retval.append("\\\"");
                    break;
                case '\'':
                    retval.append("\\\'");
                    break;
                case '\\':
                    retval.append("\\\\");
                    break;
                default:
                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                        String s = "0000" + Integer.toString(ch, 16);
                        retval.append("\\u" + s.substring(s.length() - 4, s.length()));
                    } else {
                        retval.append(ch);
                    }
                    break;
            }
        }
        return retval.toString();
    }

    /**
     * Retorna uma mensagem detalhada para o erro quando ele é lançado pelo
     * gerenciador de token para indicar um erro léxico.
     * Parâmetros:
     * eofseen: indica se EOF causou o erro léxico
     * curLexState: estado léxico em que este erro ocorreu
     * errorLine: número da linha quando o erro ocorreu
     * errorColumn: número da coluna quando o erro ocorreu
     * errorAfter: prefixo que foi visto antes de ocorrer este erro
     * curchar: o personagem ofensivo
     * Nota: Você pode personalizar a mensagem de erro lexical modificando este método.
     */
    protected static String lexicalError(boolean eofseen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
        return ("Lexical error at line " +
                errorLine + ", column " +
                errorColumn + ".  Encountered: " +
                (eofseen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int) curChar + "), ") +
                "after : \"" + addEscapes(errorAfter) + "\"");
    }

    /**
     * Você também pode modificar o corpo deste método para personalizar suas mensagens de erro.
     * Por exemplo, casos como LOOP_DETECTED e INVALID_LEXICAL_STATE não são
     * de preocupação dos usuários finais, então você pode retornar algo como:
     * <p>
     * "Erro interno: envie um relatório de bug ...."
     * <p>
     * deste método para tais casos na versão de lançamento do seu analisador.
     */
    @Override
    public String getMessage() {
        return super.getMessage();
    }
}
/* JavaCC - OriginalChecksum=ce00f4722a864c4add5ceb5f2700095c (do not edit this line) */
